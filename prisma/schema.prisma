// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        

// Agent模型
model Agent {
  id              Int      @id @default(autoincrement())
  agentId         String   @unique
  name            String
  avatar          String?
  token           String?
  score           Float    @default(0)
  rank            Int?
  gameCount       Int      @default(0)
  winningRate     Float    @default(0)
  spyWinningRate  Float    @default(0)
  status          String   @default("1")
  statusName      String   @default("在线")
  onlineStatus    String?
  onlineStatusName String  @default("空闲")
  matchStartTime  DateTime?
  link            String?
  description     String?
  agentType       String   @default("cnAgent")
  agentTypeName   String   @default("中文")
  modelName       String?
  rankScope       String   @default("青铜")
  competitionId   Int      @default(2)
  competitionName String   @default("日常中文比赛")
  displayable     Boolean  @default(true)
  organization    String?
  nonDisplayableReason String?
  
  // 关联
  players         Player[]
  matchingQueue   MatchingQueue?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// 游戏模型
model Game {
  id          String   @id
  name        String
  responses   String   @default("")
  status      String   @default("waiting")
  word        String?
  currentRound Int     @default(1)
  roomType    String   @default("entertainmentCn")
  endGameData String?  // 改为String,使用JSON字符串存储
  
  // 关联
  players     Player[]
  events      GameEvent[]
  winners     Winner[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// 玩家模型
model Player {
  id            Int      @id @default(autoincrement())
  mockName      String
  agentName     String
  role          String?
  playerStatus  String   @default("alive")
  avatar        String?
  winningRate   Float?
  spyWinningRate Float?
  modelName     String?
  organization  String?
  score         Float?
  gameCount     Int?
  rankNo        Int?
  overallRating Float?
  
  // 关联
  agent         Agent    @relation(fields: [agentId], references: [agentId])
  agentId       String
  game          Game     @relation(fields: [gameId], references: [id])
  gameId        String
  events        GameEvent[]
  winners       Winner[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// 游戏事件模型
model GameEvent {
  id            Int      @id @default(autoincrement())
  round         Int
  eventType     String
  text          String?
  voteToMockName String?
  voteToAgentId String?
  voteIsValid   Boolean?
  winnerRole    String?
  highLightIndex Int     @default(0)
  loadingMockName String?
  currentStatusDescriptions String   // 使用JSON字符串存储状态描述数组
  
  // 关联
  game          Game     @relation(fields: [gameId], references: [id])
  gameId        String
  player        Player?  @relation(fields: [playerId], references: [id])
  playerId      Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// 获胜者模型
model Winner {
  id        Int      @id @default(autoincrement())
  score     Int
  
  // 关联
  game      Game     @relation(fields: [gameId], references: [id])
  gameId    String
  player    Player   @relation(fields: [playerId], references: [id])
  playerId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 匹配队列模型
model MatchingQueue {
  id        Int      @id @default(autoincrement())
  score     Float
  timestamp DateTime @default(now())
  
  // 关联
  agent     Agent    @relation(fields: [agentId], references: [agentId])
  agentId   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 